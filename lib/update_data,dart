import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

class UpdateUserPage extends StatefulWidget {
  final Map<String, dynamic> userData;

  const UpdateUserPage({
    Key? key,
    required this.userData,
  }) : super(key: key);

  @override
  State<UpdateUserPage> createState() => _UpdateUserPageState();
}

class _UpdateUserPageState extends State<UpdateUserPage> {
  final _formKey = GlobalKey<FormState>();
  late TextEditingController _usernameController;
  late TextEditingController _phoneController;
  bool _status = false;
  bool _isLoading = false;
  String _message = '';

  @override
  void initState() {
    super.initState();
    // Initialize controllers with existing data
    _usernameController = TextEditingController(text: widget.userData['username']);
    _phoneController = TextEditingController(text: widget.userData['phone']);
    _status = widget.userData['Status'] ?? false;
  }

  @override
  void dispose() {
    _usernameController.dispose();
    _phoneController.dispose();
    super.dispose();
  }

  Future<void> _updateUser() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    setState(() {
      _isLoading = true;
      _message = '';
    });

    final userId = widget.userData['id'];
    
    var headers = {
      'Content-Type': 'application/json',
      'X-CSRFToken': 'EJQ23vQ3emaFGYmdm1Emc13jYe7vuaJX',
      'Accept': 'application/json'
    };

    var request = http.Request('PUT', Uri.parse('http://127.0.0.1:8000/update/$userId'));
    
    request.body = json.encode({
      "username": _usernameController.text,
      "phone": _phoneController.text,
      "Status": _status
    });
    
    request.headers.addAll(headers);

    try {
      http.StreamedResponse response = await request.send();
      
      String responseBody = await response.stream.bytesToString();
      print("Update Response: $responseBody");
      
      if (response.statusCode == 200) {
        setState(() {
          _message = 'User updated successfully';
          _isLoading = false;
        });
        
        // Show success message and return to previous screen after a delay
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('User updated successfully')),
        );
        
        // Wait a moment before navigating back
        Future.delayed(Duration(seconds: 1), () {
          Navigator.pop(context, true); // Return true to indicate successful update
        });
      } else {
        setState(() {
          _message = 'Failed to update user: ${response.reasonPhrase}';
          _isLoading = false;
        });
      }
    } catch (e) {
      print("Update Exception: $e");
      setState(() {
        _message = 'Error: $e';
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Update User'),
        actions: [
          IconButton(
            icon: Icon(Icons.save),
            onPressed: _isLoading ? null : _updateUser,
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Form(
          key: _formKey,
          child: ListView(
            children: [
              // User ID display (non-editable)
              Card(
                margin: EdgeInsets.only(bottom: 16),
                child: ListTile(
                  title: Text('User ID'),
                  subtitle: Text(widget.userData['id'].toString()),
                  leading: Icon(Icons.perm_identity),
                ),
              ),
              
              // Username field
              TextFormField(
                controller: _usernameController,
                decoration: InputDecoration(
                  labelText: 'Username',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.person),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a username';
                  }
                  return null;
                },
              ),
              SizedBox(height: 16),
              
              // Phone field
              TextFormField(
                controller: _phoneController,
                decoration: InputDecoration(
                  labelText: 'Phone',
                  border: OutlineInputBorder(),
                  prefixIcon: Icon(Icons.phone),
                ),
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return 'Please enter a phone number';
                  }
                  return null;
                },
                keyboardType: TextInputType.phone,
              ),
              SizedBox(height: 16),
              
              // Status switch
              Card(
                child: SwitchListTile(
                  title: Text('Status'),
                  subtitle: Text(_status ? 'Active' : 'Inactive'),
                  value: _status,
                  onChanged: (value) {
                    setState(() {
                      _status = value;
                    });
                  },
                ),
              ),
              
              // Update button
              SizedBox(height: 24),
              ElevatedButton(
                onPressed: _isLoading ? null : _updateUser,
                child: _isLoading
                  ? SizedBox(
                      height: 20,
                      width: 20,
                      child: CircularProgressIndicator(
                        strokeWidth: 2,
                        color: Colors.white,
                      ),
                    )
                  : Text('Update User'),
                style: ElevatedButton.styleFrom(
                  padding: EdgeInsets.symmetric(vertical: 16),
                ),
              ),
              
              // Message display
              if (_message.isNotEmpty)
                Padding(
                  padding: const EdgeInsets.only(top: 16.0),
                  child: Text(
                    _message,
                    style: TextStyle(
                      color: _message.contains('successfully') ? Colors.green : Colors.red,
                      fontWeight: FontWeight.bold,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
            ],
          ),
        ),
      ),
    );
  }
}